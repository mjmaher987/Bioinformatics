# -*- coding: utf-8 -*-
"""Construct a Trie from a Collection of Patterns.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iP6gSvphTnN9abSejNEx2NqyIvXNLUy7
"""

import os
os.chdir('c:/Users/mjmah/OneDrive/Desktop/everything/Main/term7/bio/HWs/HW1/q5')

all_DNAs = []
with open('rosalind_ba9a.txt', 'r') as file:
  for dna in file:
    all_DNAs.append(dna.strip())


class DNA:
  counter = 0

  def __init__(self):
    self.index = DNA.counter
    self.value = ""
    self.children = []
    self.children_values = []
    self.father_index = -1
    DNA.counter += 1




def create_Trie():
  starting_node = DNA()
  starting_node.father_index = -1

  for dna in all_DNAs:
    last_node = starting_node
    for char in dna:
      if char in last_node.children_values:
        for child in last_node.children:
          if child.value == char:
            last_node = child
            break
      else:
        new_node = DNA()
        new_node.value = char
        new_node.father_index = last_node.index
        last_node.children.append(new_node)
        last_node.children_values.append(char)
        last_node = new_node
  return starting_node

str_to_save = ""
def recursive_print(node):
  if node.father_index != -1:
    global str_to_save
    str_to_save += f'{node.father_index}->{node.index}:{node.value}\n'
    # print(f'{node.father_index}->{node.index}:{node.value}')
  for child in node.children:
    recursive_print(child)

starting_node = create_Trie()
recursive_print(starting_node)

with open('to_save.txt', 'w') as file:
  file.write(str_to_save)