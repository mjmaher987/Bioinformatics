# -*- coding: utf-8 -*-
"""Local Alignment with Scoring Matrix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PNgDzDvea70MNeO4kw98JJdEZw09ug7q
"""

# MJ Maheronnaghsh
PAM250 = [
	[  2,  -2,   0,   0,  -3,   1,  -1,  -1,  -1,  -2,  -1,   0,   1,   0,  -2,   1,   1,   0,  -6,  -3],
	[ -2,  12,  -5,  -5,  -4,  -3,  -3,  -2,  -5,  -6,  -5,  -4,  -3,  -5,  -4,   0,  -2,  -2,  -8,   0],
	[  0,  -5,   4,   3,  -6,   1,   1,  -2,   0,  -4,  -3,   2,  -1,   2,  -1,   0,   0,  -2,  -7,  -4],
	[  0,  -5,   3,   4,  -5,   0,   1,  -2,   0,  -3,  -2,   1,  -1,   2,  -1,   0,   0,  -2,  -7,  -4],
	[ -3,  -4,  -6,  -5,   9,  -5,  -2,   1,  -5,   2,   0,  -3,  -5,  -5,  -4,  -3,  -3,  -1,   0,   7],
	[  1,  -3,   1,   0,  -5,   5,  -2,  -3,  -2,  -4,  -3,   0,   0,  -1,  -3,   1,   0,  -1,  -7,  -5],
	[ -1,  -3,   1,   1,  -2,  -2,   6,  -2,   0,  -2,  -2,   2,   0,   3,   2,  -1,  -1,  -2,  -3,   0],
	[ -1,  -2,  -2,  -2,   1,  -3,  -2,   5,  -2,   2,   2,  -2,  -2,  -2,  -2,  -1,   0,   4,  -5,  -1],
	[ -1,  -5,   0,   0,  -5,  -2,   0,  -2,   5,  -3,   0,   1,  -1,   1,   3,   0,   0,  -2,  -3,  -4],
	[ -2,  -6,  -4,  -3,   2,  -4,  -2,   2,  -3,   6,   4,  -3,  -3,  -2,  -3,  -3,  -2,   2,  -2,  -1],
	[ -1,  -5,  -3,  -2,   0,  -3,  -2,   2,   0,   4,   6,  -2,  -2,  -1,   0,  -2,  -1,   2,  -4,  -2],
	[  0,  -4,   2,   1,  -3,   0,   2,  -2,   1,  -3,  -2,   2,   0,   1,   0,   1,   0,  -2,  -4,  -2],
	[  1,  -3,  -1,  -1,  -5,   0,   0,  -2,  -1,  -3,  -2,   0,   6,   0,   0,   1,   0,  -1,  -6,  -5],
	[  0,  -5,   2,   2,  -5,  -1,   3,  -2,   1,  -2,  -1,   1,   0,   4,   1,  -1,  -1,  -2,  -5,  -4],
	[ -2,  -4,  -1,  -1,  -4,  -3,   2,  -2,   3,  -3,   0,   0,   0,   1,   6,   0,  -1,  -2,   2,  -4],
	[  1,   0,   0,   0,  -3,   1,  -1,  -1,   0,  -3,  -2,   1,   1,  -1,   0,   2,   1,  -1,  -2,  -3],
	[  1,  -2,   0,   0,  -3,   0,  -1,   0,   0,  -2,  -1,   0,   0,  -1,  -1,   1,   3,   0,  -5,  -3],
	[  0,  -2,  -2,  -2,  -1,  -1,  -2,   4,  -2,   2,   2,  -2,  -1,  -2,  -2,  -1,   0,   4,  -6,  -2],
	[ -6,  -8,  -7,  -7,   0,  -7,  -3,  -5,  -3,  -2,  -4,  -4,  -6,  -5,   2,  -2,  -5,  -6,  17,   0],
	[ -3,   0,  -4,  -4,   7,  -5,   0,  -1,  -4,  -1,  -2,  -2,  -5,  -4,  -4,  -3,  -3,  -2,   0,  10]
]

protein_alphabet = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N',
                    'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y']
protein_map = dict(zip(protein_alphabet, range(len(protein_alphabet))))


all_sequences = []
last_sequence = None

class Sequence:
    def __init__(self):
        self.string = ""
    def add_nucleotide(self, to_add):
        self.string += to_add

# Scan the input
def scan_DNAs():
  with open('rosalind_loca.txt', 'r') as file:
      for sequence in file:
          sequence = sequence.strip()
          if sequence.startswith('>'):
              last_sequence = Sequence()
              all_sequences.append(last_sequence)
          else:
              last_sequence.add_nucleotide(sequence)

  all_sequences[0].string.replace('\n', '')
  all_sequences[1].string.replace('\n', '')

  sequence_a = all_sequences[0].string
  sequence_b = all_sequences[1].string
  return sequence_a, sequence_b

# Here we have initialized the Alignment Matrix
def initialize_align_matrix(alignment_matrix, length_a, length_b):
  for i in range(length_b + 1):
      alignment_matrix[i][0] = 0
  for j in range(length_a + 1):
      alignment_matrix[0][j] = 0

# Here we print the best Alignment and return the best_i and best_j
def loop_for_PAM_250(sequence_a, sequence_b, alignment_matrix, gap_penalty):
  best_alignment_value = -1000 # a big negative number
  best_i, best_j = None, None
  for i in range(1, len(sequence_b) + 1):
      for j in range(1, len(sequence_a) + 1):
          match_value = PAM250[protein_map[sequence_a[j - 1]]][protein_map[sequence_b[i - 1]]]
          alignment_matrix[i][j] = max(0, alignment_matrix[i - 1][j - 1] + match_value, alignment_matrix[i - 1][j] + gap_penalty, alignment_matrix[i][j - 1] + gap_penalty)
          if alignment_matrix[i][j] > best_alignment_value:
              best_alignment_value = alignment_matrix[i][j]
              best_i, best_j = i, j
  print(best_alignment_value)
  return best_i, best_j

# It is the main function that return the aligned strings
def align_func(best_i, best_j, alignment_matrix, sequence_a, sequence_b, gap_penalty):
  alignment_a = []
  alignment_b = []
  current_i, current_j = best_i, best_j
  while alignment_matrix[current_i][current_j] > 0:
      match_value = PAM250[protein_map[sequence_a[current_j - 1]]][protein_map[sequence_b[current_i - 1]]]
      if alignment_matrix[current_i][current_j] == alignment_matrix[current_i - 1][current_j - 1] + match_value:
          alignment_a.append(sequence_a[current_j - 1])
          alignment_b.append(sequence_b[current_i - 1])
          current_i -= 1
          current_j -= 1
      elif alignment_matrix[current_i][current_j] == alignment_matrix[current_i - 1][current_j] + gap_penalty:
          alignment_b.append(sequence_b[current_i - 1])
          current_i -= 1
      elif alignment_matrix[current_i][current_j] == alignment_matrix[current_i][current_j - 1] + gap_penalty:
          alignment_a.append(sequence_a[current_j - 1])
          current_j -= 1
      else:
          raise Exception()
  return alignment_a[::-1], alignment_b[::-1]

def calc(sequence_a, sequence_b):
  gap_penalty = -5
  alignment_matrix = [[None for _ in range(len(sequence_a) + 1)] for _ in range(len(sequence_b) + 1)]
  initialize_align_matrix(alignment_matrix, len(sequence_a), len(sequence_b))
  best_i, best_j = loop_for_PAM_250(sequence_a, sequence_b, alignment_matrix, gap_penalty)
  return align_func(best_i, best_j, alignment_matrix, sequence_a, sequence_b, gap_penalty)

input1, input2 = scan_DNAs()
answer1, answer2 = calc(input1, input2)
print(''.join(answer1))
print(''.join(answer2))